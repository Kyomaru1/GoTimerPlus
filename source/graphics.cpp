#include <nds.h>
#include "gl2d.h"
#include "graphics.h"
#include "TopBackground.h"

#define CONSOLE_SCREEN_WIDTH 32
#define CONSOLE_SCREEN_HEIGHT 24

int topBgTexID;
glImage topBgImage[(256/16) *(256/16)];
glImage subBgImage[(256/16) * (256/16)];

void vramcpy_ui (void* dest, const void* src, int size) 
{
	u16* destination = (u16*)dest;
	u16* source = (u16*)src;
	while (size > 0) {
		*destination++ = *source++;
		size-=2;
	}
}

void initSubSprites(void)
{

	oamInit(&oamSub, SpriteMapping_Bmp_2D_256, false);
	int id = 0;

	//set up a 4x3 grid of 64x64 sprites to cover the screen
	for (int y = 0; y < 3; y++)
		for (int x = 0; x < 4; x++)
		{
			oamSub.oamMemory[id].attribute[0] = ATTR0_BMP | ATTR0_SQUARE | (64 * y);
			oamSub.oamMemory[id].attribute[1] = ATTR1_SIZE_64 | (64 * x);
			oamSub.oamMemory[id].attribute[2] = ATTR2_ALPHA(1) | (8 * 32 * y) | (8 * x);
			++id;
		}

	swiWaitForVBlank();

	oamUpdate(&oamSub);
}

void drawBG(glImage *images)
{
	for (int y = 0; y < 256 / 16; y++)
	{
		for (int x = 0; x < 256 / 16; x++)
		{
			int i = y * 16 + x;
			glSprite(x * 16, y * 16, GL_FLIP_NONE, &images[i & 255]);
		}
	}
}

void vBlankHandler()
{
	glBegin2D();
	{
        drawBG(topBgImage);
    }
    glEnd2D();
    GFX_FLUSH=0;
}

// void graphicsInit()
// {
//     irqSet(IRQ_VBLANK, vBlankHandler);
// 	irqEnable(IRQ_VBLANK);
// 	////////////////////////////////////////////////////////////
// 	videoSetMode(MODE_5_3D);
// 	videoSetModeSub(MODE_0_2D | DISPLAY_BG0_ACTIVE);


// 	// Initialize gl2d
// 	glScreen2D();

// 	// Set up enough texture memory for our textures
// 	// Bank A is just 128kb and we are using 194 kb of
// 	// sprites
// 	vramSetBankA(VRAM_A_TEXTURE);
// 	vramSetBankB(VRAM_B_TEXTURE);
// 	vramSetBankD(VRAM_D_TEXTURE);
// 	vramSetBankF(VRAM_F_TEX_PALETTE); // Allocate VRAM bank for all the palettes

// 	vramSetBankE(VRAM_E_MAIN_BG);

//     lcdMainOnTop();

//     vramSetBankC(VRAM_C_SUB_BG_0x06200000);
// 	//REG_BG0CNT_SUB = BG_MAP_BASE(0) | BG_COLOR_256 | BG_TILE_BASE(2);
// 	u16* bgMapTop = (u16*)SCREEN_BASE_BLOCK_SUB(0);
// 	for (int i = 0; i < CONSOLE_SCREEN_WIDTH*CONSOLE_SCREEN_HEIGHT; i++) {
// 		bgMapTop[i] = (u16)i;
// 	}
//     *(u16*)(0x0400006C) |= BIT(14);
// 	*(u16*)(0x0400006C) &= BIT(15);

//     topBgTexID = glLoadTileSet(topBgImage, // pointer to glImage array
// 							16, // sprite width
// 							16, // sprite height
// 							256, // bitmap width
// 							256, // bitmap height
// 							GL_RGB16, // texture type for glTexImage2D() in videoGL.h
// 							TEXTURE_SIZE_256, // sizeX for glTexImage2D() in videoGL.h
// 							TEXTURE_SIZE_256, // sizeY for glTexImage2D() in videoGL.h
// 							TEXGEN_OFF, // param for glTexImage2D() in videoGL.h
// 							16, // Length of the palette to use (256 colors)
// 							(u16*) TopBackgroundPal, // Load our 256 color tiles palette
// 							(u8*) TopBackgroundBitmap// image data generated by GRIT
// 							);
// }
void drawGraphics();

void graphicsInit()
{
    irqSet(IRQ_VBLANK, vBlankHandler);
	irqEnable(IRQ_VBLANK);
	////////////////////////////////////////////////////////////
	videoSetMode(MODE_3_3D);
	videoSetModeSub(MODE_3_2D);


	// Initialize gl2d
	glScreen2D();

	// Set up enough texture memory for our textures
	// Bank A is just 128kb and we are using 194 kb of
	// sprites
	vramSetBankA(VRAM_A_MAIN_BG);

    vramSetBankC(VRAM_C_SUB_BG);
	drawGraphics();
}

void drawGraphics(){
	//setup main bg layers
	// int bg1 = bgInit(0, BgType_Text8bpp, BgSize_T_256x256, 0, 1);
	// int bg2 = bgInit(1, BgType_Text8bpp, BgSize_T_256x256, 1, 2);
	// int bg3 = bgInit(2, BgType_ExRotation, BgSize_ER_256x256, 2, 3);
	int bg4 = bgInit(3, BgType_Bmp8, BgSize_B8_256x256, 0, 0);

	//setup sub bg layers
	// int bg5 = bgInitSub(0, BgType_Text8bpp, BgSize_ER_256x256, 0, 1);
	// int bg6 = bgInitSub(1, BgType_Text8bpp, BgSize_ER_256x256, 1, 1);
	// int bg7 = bgInitSub(2, BgType_Text8bpp, BgSize_ER_256x256, 2, 1);
	// int bg8 = bgInitSub(3, BgType_Bmp8, BgSize_B8_256x256, 4, 0);

	//setup BG Priorities
	//main
	// bgSetPriority(bg1, 3);
	// bgSetPriority(bg2, 2);
	// bgSetPriority(bg3, 1);
	
	// //sub
	// bgSetPriority(bg5, 3);
	// bgSetPriority(bg6, 2);
	// bgSetPriority(bg7, 1);

	//copy appropriate tiles to appropriate layers. DMACopy
	//topscreen bg layer 0:
	dmaCopy(TopBackgroundBitmap, bgGetGfxPtr(bg4), TopBackgroundBitmapLen);
	dmaCopy(TopBackgroundPal, BG_PALETTE, 256*2);
	// dmaCopy(TopBackgroundMap, bgGetMapPtr(bg4), TopBackgroundMapLen);

	//setup sprites for Top Screen player info/time/turns
	//layer 1:
	//setup sprites for Large number displays
	//layer 2:
	//setup sprites for icons
	//layer 3:

	//setup background for sub screen
	//layer 0:
	// dmaCopy(TopBackgroundBitmap, bgGetGfxPtr(bg8), TopBackgroundBitmapLen);
	// dmaCopy(TopBackgroundPal, BG_PALETTE_SUB, 256*2);
	// dmaCopy(TopBackgroundMap, bgGetMapPtr(bg8), TopBackgroundMapLen);
	//setup sprites for buttons/UI
	//layer 1:
	//setup sprites for text:
	//layer 2:
	//setup sprites for larger numbers:
	//layer 3
	
}